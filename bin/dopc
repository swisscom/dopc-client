#!/usr/bin/env ruby

require 'gli'
require 'base64'
require 'rest-client'
require 'dopc'

include GLI::App

program_desc 'CLI client for DOPc. For general errors the client will exit with 1.'

version Dopc::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'URL where DOPc service runs'
default_value 'http://localhost:3000'
arg_name 'url'
flag [:u,:url]

desc 'API version to use'
default_value '1'
arg_name 'api'
flag [:a,:api]

desc 'Show debug output'
switch [:d,:debug]

def api(options, method, path, payload = {})
  client = Dopc::ApiClient.new(options[:url], options[:api])
  begin
    body = client.request(method, path, payload)
    return body.empty? ? {} : JSON.parse(body)
  rescue RestClient::Exception => e
    body = e.response.body
    error = body.empty? ? 'Unknown' : JSON.parse(body)['error']
    exit_now!(error, 1)
  end
end

pre do |global_options,command,options,args|
  ENV['GLI_DEBUG'] = 'true' if global_options[:debug]
  true
end

desc 'Ping the API'
command :ping do |c|
  c.action do |global_options,options,args|
    response = api(global_options, :get, 'ping')
    puts response['pong']
  end
end

desc 'Manage plans'
command :plan do |c|
  c.desc 'List all plans'
  c.command :list do |sc|
    sc.action do |global_options,options,args|
      response = api(global_options, :get, 'plans')
      response['plans'].each { |plan| puts plan['name'] }
    end
  end
  c.arg_name '<file>'
  c.desc 'Add a plan'
  c.command :add do |sc|
    sc.action do |global_options,options,args|
      help_now!('Specify plan file to add') if args.empty?
      file = args[0]
      content = Base64.encode64(File.read(file))
      payload = {content: content}
      response = api(global_options, :post, 'plans', payload)
      puts response['name']
    end
  end
  c.arg_name '<name>'
  c.desc 'Delete a plan'
  c.command :del do |sc|
    sc.action do |global_options,options,args|
      help_now!('Specify plan to delete') if args.empty?
      name = args[0]
      response = api(global_options, :delete, "plans/#{name}")
      puts response['name']
    end
  end
  c.arg_name '<name>'
  c.desc 'Check a plan. Exits with 65 if plan is invalid.'
  c.command :check do |sc|
    sc.action do |global_options,options,args|
      help_now!('Specify plan to delete') if args.empty?
      name = args[0]
      response = api(global_options, :get, "plans/#{name}/check")
      exit_now!("Plan is invalid", 65) unless response['valid']
    end
  end
end

exit run(ARGV)
