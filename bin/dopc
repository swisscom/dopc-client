#!/usr/bin/env ruby

require 'gli'
require 'rest-client'
require 'json'
require 'base64'

include GLI::App

def request(options, method, path, payload = {})
  url = "#{options[:url]}/api/v#{options[:api]}/#{path}"
  headers = {accept: :json, content_type: :json}
  begin
    response = RestClient::Request.execute(method: method, url: url, headers: headers, payload: payload.to_json)
    return response.body.empty? ? {} : JSON.parse(response.body)
  rescue RestClient::Exception => e
    body = e.response.body
    error = body.empty? ? 'Unknown' : JSON.parse(body)['error']
    exit_now!(error, 1)
  end
end

program_desc 'CLI client for DOPc'

version Dopc::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'URL where DOPc service runs'
default_value 'http://localhost:3000'
arg_name 'url'
flag [:u,:url]

desc 'API version to use'
default_value '1'
arg_name 'api'
flag [:a,:api]

desc 'Ping the API'
command :ping do |c|
  c.action do |global_options,options,args|
    response = request(global_options, :get, 'ping')
    puts response['pong']
  end
end

desc 'Manage plans'
command :plan do |c|
  c.desc 'List all plans'
  c.command :list do |sc|
    sc.action do |global_options,options,args|
      response = request(global_options, :get, 'plans')
      response['plans'].each { |plan| puts plan['name'] }
    end
  end
  c.arg_name '<file>'
  c.desc 'Add a plan'
  c.command :add do |sc|
    sc.action do |global_options,options,args|
      help_now!('Specify plan file to add') if args.empty?
      file = args[0]
      content = Base64.encode64(File.read(file))
      payload = {content: content}
      response = request(global_options, :post, 'plans', payload)
      puts response['name']
    end
  end
  c.arg_name '<name>'
  c.desc 'Delete a plan'
  c.command :del do |sc|
    sc.action do |global_options,options,args|
      help_now!('Specify plan to delete') if args.empty?
      name = args[0]
      response = request(global_options, :delete, "plans/#{name}")
      puts response['name']
    end
  end
end

exit run(ARGV)
