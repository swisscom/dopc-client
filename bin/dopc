#!/usr/bin/env ruby

require 'gli'
require 'base64'
require 'rest-client'
require 'dopc'

include GLI::App

program_desc 'CLI client for DOPc. For general errors the client will exit with 1. For an invalid plan file it exits with 65.'

version Dopc::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'URL where DOPc service runs'
default_value 'http://localhost:3000'
arg_name 'url'
flag [:u, :url]

desc 'API version to use'
default_value '1'
arg_name 'api'
flag [:a, :api]

desc 'Show debug output'
switch [:d, :debug]

def api(options, method, path, payload = nil)
  client = Dopc::ApiClient.new(options[:url], options[:api])
  begin
    body = client.request(method, path, payload)
    return body.empty? ? {} : JSON.parse(body)
  rescue RestClient::Exception => e
    body = e.response.body
    error = body.empty? ? 'Unknown' : JSON.parse(body)['error']
    exit_now!(error, 1)
  end
end

pre do |global_options,command,options,args|
  ENV['GLI_DEBUG'] = 'true' if global_options[:debug]
  true
end

desc 'Ping the API'
command :ping do |c|
  c.action do |global_options, options, args|
    response = api(global_options, :get, 'ping')
    puts response['pong']
  end
end

desc 'Manage plans'
command :plan do |c|
  c.desc 'List all plans'
  c.command :list do |sc|
    sc.action do |global_options, options, args|
      response = api(global_options, :get, 'plans')
      response['plans'].each { |plan| puts plan['name'] }
    end
  end
  c.arg '<plan_name>'
  c.desc 'Get a plan'
  c.command :get do |sc|
    sc.action do |global_options, options, args|
      plan = args[0]
      help_now!('Specify plan to retrieve') unless plan
      response = api(global_options, :get, "plans/#{plan}")
      content = Base64.decode64(response['content'])
      puts content
    end
  end
  c.arg '<file>'
  c.desc 'Add a plan from file'
  c.command :add do |sc|
    sc.action do |global_options, options, args|
      file = args[0]
      help_now!('Specify plan file to add') unless file
      content = Base64.encode64(File.read(file))
      payload = {content: content}
      response = api(global_options, :post, 'plans', payload)
      puts "Added plan: #{response['name']}"
    end
  end
  c.arg '<plan_name> <file>', :multiple
  c.desc 'Update a plan from a file'
  c.command :update do |sc|
    sc.action do |global_options, options, args|
      plan = args[0]
      file = args[1]
      help_now!('Specify plan to update') unless plan
      help_now!('Specify file to update from') unless file
      content = Base64.encode64(File.read(file))
      payload = {content: content}
      response = api(global_options, :put, "plans/#{plan}", payload)
      puts "Updated plan: #{response['name']}"
    end
  end
  c.arg '<plan_name>'
  c.desc 'Delete a plan'
  c.command :del do |sc|
    sc.action do |global_options, options, args|
      plan = args[0]
      help_now!('Specify plan to delete') unless plan
      response = api(global_options, :delete, "plans/#{plan}")
      puts "Deleted plan: #{response['name']}"
    end
  end
  c.arg '<plan_name>'
  c.desc 'Check a plan'
  c.command :check do |sc|
    sc.action do |global_options, options, args|
      plan = args[0]
      help_now!('Specify plan to delete') unless plan
      response = api(global_options, :get, "plans/#{plan}/check")
      exit_now!("Plan is invalid", 65) unless response['valid']
    end
  end
end

desc 'Manage plan executions'
command :exec do |c|
  c.desc 'List all executions'
  c.command :list do |sc|
    sc.action do |global_options, options, args|
      response = api(global_options, :get, 'executions')
      response['executions'].each { |exec| puts "#{exec['id']}  #{exec['plan']}  #{exec['task']}  #{exec['stepset']}  #{exec['status']}  #{exec['log']}" }
    end
  end
  c.arg '<plan_name> <task_name> [<stepset>]', :multiple
  c.desc 'Execute a plan (DOPv and DOPi). The task must be one of: setup (run and deploy), deploy, run, undeploy.'
  c.command :new do |sc|
    sc.action do |global_options, options, args|
      name = args[0]
      task = args[1]
      stepset = args[2]
      help_now!('Specify plan to execute') unless name
      help_now!('Specify task to execute') unless task
      payload = {plan: name, task: task}
      stepset ? payload.merge!({stepset: stepset}) :
      response = api(global_options, :post, "executions", payload)
      puts "Started execution with id: #{response['id']}"
    end
  end
end

exit run(ARGV)
